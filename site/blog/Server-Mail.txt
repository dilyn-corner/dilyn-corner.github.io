You've Got Mail
________________________________________________________________________________

There are plenty of guides all over the internet for how to setup a mail server.
Honestly, it's a bit overwhelming just how many there are. And they're all the
same: use your package manager to install bla, do bla hoopla, set foo and mv
bar... It's tedious, it's dumb, it isn't one-to-one. There are simpler ways. 

I am running a mailserver with exactly 51 packages and fewer than 2GB of space
used up. It idles at around 140MB RAM usage. It works very well. And it was
mindnumbingly simple, after I read a few manpages, read one of the package's
author's blog post on usage, and figured out how I had created an infinite
delivery loop that rendered the whole stack dead until I added a quick match
directive to a configuration file. 

People will tell you mail was hard, and that's just not true. And while it took
me four days to set everything up, that's mostly because I did a lot of
exploring in the meantime. All-in-all, it probably took around an afternoon to
do the core parts that mattered - and that includes building all the
dependencies *on the server* - a real genius would've scp'd them up. 

I don't intend on doing any in-depth explanations of what most of these parts
are, just know that you need/want them. This is essentially the minimum-viable
setup, with a bit of gravy to handle the spam. If you want actual details on
most of this stuff, I'd recommend starting by looking here [1] - Linode offers a
great and compact little explainer of how the whole thing operates. It's concise
enough to get the picture. 

The basic stack is OpenSMTPD as our MTA, dovecot providing our IMAP and mailbox
management stuff, rspamd+redis for spam filtering and DKIM signing, mlmmj for
mailing list management (made it joyful), and finally bubger for archiving. We
make use of caddy to power our archive website, because we already had it for
our other servers. If you're not making your archives public, you don't need it.
We make light use of crond, certbot once a year (so install python on December
31st and then please, PLEASE uninstall it), and a service manager (busybox sv is
all we need). You can find the whole stack this server runs that isn't covered
by $/kiss-community/repo or $/kiss-community/community over at
$dilyn-corner/KISS-serv - seriously, that's it.

The short answer of where you *have* to read is: you need an MTA, regardless.
That's what OpenSMTPD covers. If you just want a mailing list, you just need
this. If you want to replace Gmail/Protonmail/Tutanota/whatevermail, then you'll
want to run an IMAP server - that's what dovecot is for. 

Spam filtering is covered by rspamd, which requires redis. You'll want spam
filtering, because it's great. rspamd also covers DKIM signing our emails in a
really easy to configure way, so there's no good reason not to just do it.

All of these resources you need to refer to otherwise can be found here:
Core setup        [2]
Clarify OpenSMTPD [3]
mlmmj             [4]
bubger            [5]

Linode instituted a policy that ports 25, 465, and 587 are closed by default on
all new accounts. I'd suggest opening a ticket after continuing to get those
ports opened up - they usually respond within a few hours.
Or you can use iptables2 in community and do it yourself... who knows... [6]

I'm assuming you're using KISS here as described in @/Server
If you're not, adapt, evolve, overcome.

This is going to be divied up into sections:
________________________________________________________________________________

- DNS records                                                              [1.0]
- OpenSMTPD configuration                                                  [2.0]
- mailing list configuration                                               [3.0]
- rspamd+redis configuration                                               [4.0]
- dovecot configuration                                                    [5.0]
- bubger configuration                                                     [6.0]


[1.0] DNS records
________________________________________________________________________________

domain.tld is whatever website you're setting up mail for - in my case, it was
k1sslinux.org. In your case, maybe it's goodtimesat5.com. Who knows. Just don't
assume domain.tld is a literal - it's a variable, fill in the blank.

Here are precisely the records you need for all this - even if you just want a
mailing list. An A record for your mail domain (mail.domain.tld), an MX record
pointing from domain.tld TO mail.domain.tld, and 3 TXT records; one for DMARC,
one for DKIM, and one for SPF. 

First, your hostname should be what you want the banner from OpenSMTPD to be
when when it handshakes other servers - this banner should match the A record
you made (mail.domain.tld). Just do a quick 

# echo mail.domain.tld > /etc/hostname

You might want to add to /etc/hosts a line that reads

<server ip address> mail.domain.tld

Alternatively you can the hostname to /etc/mail/mailname or add 'helo
mail.domain.tld' to the end of your outbound relay action in /etc/smtpd.conf,
but hostname is useless for the most part so there's no good reason not to just
set it there.

For DKIM, we need to generate a key. We can do that pretty easily:

# dkimpath=/etc/mail/dkim
# mkdir $dkimpath
# openssl genrsa -out $dkimpath/domain.tld.key 1024
# openssl rsa -in $dkimpath/domain.tld.key -pubout -out $dkimpath/domain.tld.pub
# cat $dkimpath/domain.cat.pub
# chmod 0600 $dkimpath/domain.tld.key

Copy the public key (that gross strong after/before the ----***-----). We need
it. 

Open up your domain registrar's page to set your DNS records. Suffixes are
important here.

Make an A record for mail.domain.tld pointing to the external IP of your server

Make an MX record for domain.tld, pointing to mail.domain.tld.

Make a TXT record for _dmarc.domain.tld, pointing to:
v=DMARC1;p=none;pct=100;rua=mailto:postmaster@domain.tld;

// 'selector' below can be anything; I chose the date I made the key. We will
//  need this for later
Make a TXT record for _selector._domainkey.domain.tld, pointing to:
v=DKIM1;k=rsa;p=the public key that you copied from earlier

Make a TXT record for k1sslinux.org, that points to v=spf1 mx ~all

The first record does what we want. The rest is so that $BadEmailMonopoly
doesn't throw our email away when it gets to our recipient. 

Next you need to setup rDNS. This is just reverse DNS - if you give them an IP,
they can give you the domain name. On Linode, it's as easy as opening up your
Linode on the website, clicking the Network tab, and under the IP Addresses
block, click the ... in the row of the IPv4 address and choose 'edit rDNS'. Make
the rDNS for this address be mail.domain.tld
With rDNS, you will look more trustworthy. Spamsters and jerks don't usually
have the ability to set something like this, much like the rest of these records
we've set up. 

With all this work, I've only had my emails go to spam for two providers:
Protonmail and Tutanota. They're unkind to most of the internet. Half the
mailing lists I subscribe get marked as spam by Tutanota; they're just too
unreliable in my opinion. 
Gmail gave my emails flying colors :)

And just like that, our DNS records are all setup! Be aware that DNS records can
take up to two days to propogate. In my experience, it happens pretty quickly. 
There are a couple ways to verify this. You can use https://mxtoolbox.com/ :
MX Lookup    domain.tld          -> to mail.domain.tld
DNS Lookup   mail.domain.tld     -> to Your Linode server IP
SPF Lookup   domain.tld          -> All green
DKIM Lookup  domain.tld:selector -> All green
DMARC Lookup _dmarc.domain.tld   -> Pass everything but DMARC Policy enabled

Useful test for later when we have SMTPD setup:
Test Email Server mail.domain.tld -> All green!

You can also install bind from community and use host mail.domain.tld to get the
ip, and, the then host on that ip to get back mail.domaind.tld. If you do, then
rDNS is setup properly. You can use dig {mail.}domain.tld to get the rest of the
information mxtoolbox would give you.

Finally, we need some TLS certificates. Technically, Porkbun provides them for
me, and updates them for me too. But I didn't want to bother with this, so I
made my own! It's pretty easy if you opt to use something like certbot,
available via pip (I didn't want to package a billion python dependencies). Make
sure you have rust installed (because of some dumb upstream related decision
making, forcing rust to do SSL/TLS/Auth/Encryption things), and simply do:

# pip install certbot
# mkdir /var/www/mail.k1sslinux.org 
# certbot certonly --standalone -d mail.domain.tld

You're important files made from this process are:
/etc/letsencrypt/live/mail.domain.tld/{fullchain,privkey}.pem

And that's it! The DNS setup is done. With all this scaffolding work, you can
basically all but guarantee that your emails will be delivered 1) successfully,
2) to an inbox. 


[2.0] OpenSMTPD configuration
________________________________________________________________________________

Now we move on to the lovely task of configuring OpenSMTPD!

OpenSMTPD had an update not too long ago which rendered older configuration
files incompatible with the newer version. This, I think, is a good thing; the
syntax is basically human readable, you only need one command to really make it
all work, it's a very well designed program (what else would I expect, thank you
for libressl/openssh/openntpd BSD folks). 

A second hurdle for figuring out how to configure MTAs in general is that if you
do a single thing wrong, you can end up with undeliverable mail. Or worse, an
infinite loopback of mail deliveries. Ask me how I know (luckily OpenSMTPD just
timed out instead of actually delivering a billion emails between two accounts
for eternity). 

Finally, of all the guides that exist in the ether of the Internet, nobody
really explains how you can properly serve mailing list emails && host your own.
All-in-all, it isn't hard. Spend a little time with the OpenSMTPD manpages to
familiarize yourself with the syntax and options - honestly, if you think to
yourself 'can I do this thing in these case and something else in others?', the
answer is almost certainly yes; it's a very thorough program, you can route,
filter, and send in basically any ways you could dream of. 

All that being said, here is a simple configuration file. Explanation of what it
does after:

________________________________________________________________________________
#       $OpenBSD: smtpd.conf,v 1.10 2018/05/24 11:40:17 gilles Exp $

# This is the smtpd server system-wide configuration file.
# See smtpd.conf(5) for more information.

# Setup PKI for our certs
pki domain.tld cert "/etc/letsencrypt/live/mail.domain.tld/fullchain.pem"
pki domain.tld key  "/etc/letsencrypt/live/mail.domain.tld/privkey.pem"

# This allows us to rewrite the body when we bounce it
# That way, it looks like it came the original sender.
# Important for DMARC, DKIM to pass.
# # Currently this works for the mailing list, but not my own mails
srs key "/etc/mail/dkim/domain.tld.key"

# All the filters we could ever want.
filter "rspamd" proc-exec "/usr/lib/opensmtpd/filter-rspamd"
filter "dyndns" phase connect match rdns regex { '.*\.dyn\..*', '.*\.dsl\..*' } \
    disconnect "550 no residential connections"
filter "rdns"  phase connect match !rdns \
    disconnect "550 no rDNS is so 80s"
filter "fcrdns" phase connect match !fcrdns \
    disconnect "550 no FCrDNS is so 80s"

# The alias table for virtual users so we don't need real users
table passwd   file:/etc/mail/passwd
table aliases  file:/etc/mail/aliases
table domains  file:/etc/mail/domains
table virtuals file:/etc/mail/virtuals

# Listen for mail on eth0, enable TLS/PKI/filters/authentication
listen on lo
listen on eth0 port 25 tls pki "domain.tld" filter {"dyndns", "rdns", "fcrdns", "rspamd" }
listen on eth0 port 587 tls-require pki "domain.tld" auth <passwd> filter "rspamd"

# Define some actions - receiving and relaying
action "send"        relay                        srs
action "receive"     maildir                      alias <aliases>
action "domain_mail" lmtp "/var/run/dovecot/lmtp" rcpt-to virtual <virtuals>

## Send mail out when it hits
## Specifically, to me, OR to the mailing list.
match for  any                                     action "send"
match from any auth for     any                    action "send"
match from any for  domain  "domain.tld"           action "receive"
match from any for  rcpt-to "user.name@domain.tld" action "domain_mail"
________________________________________________________________________________

The `pki...` lines define where our certificates are for TLS authentication.
The `srs...` line defines where our DKIM key is for signing our mails.
The `filter...` lines define what does filtering on what, and what to do. 
    My favorite is the disconnect messages. Feel free to change these to meme
    on those poor saps who want to connect to your server :)
The `table...` lines tell OpenSMTPD what files to open for <table> expansions.
The `listen...` lines define what sockets we listen to for what types of
    connections. Additionally, we filter those connections based on the `filter...`
    lines, and authenticate emails by their passwords so random users can't just
    send mail to the universe.
The `action...` lines define what OpenSMTPD does - these are used by `match...`
    lines. We have a relay for sending mail out, and we use srs to say that these
    should be relayed with our DKIM key. We'll define a 'receive' action that
    delivers in the maildir format to our aliases, and we also have an action for
    when mail is delivered to a domain user, that sends the mail to dovecot over
    lmtp. Because this is a server and the users being delivered to don't have real
    accounts, we just deliver to virtual users.
The `match...` lines connect our listens to our actions. When any mail arrives,
    we send it. When any mail arrives for our domain, we receive it, when ships
    those off to our aliases. When mail is received for a specific user, it gets to
    delivered to them via dovecot. 

There are many ways to set this up. Because I'm hosting this on a server and not
my own machine, I made myself a virtual user and put myself in the virtuals
file - all mail is actually delivered to a system user named vmail who we will
setup later. Our mailing list is actually just a trigger-on-receipt; OpenSMTPD
passes the mail off to mlmmj, and this action is in the aliases file.

It's quite possible this configuration is suboptimal, or even bad. If you find a
way to improve it, let me know! 

As for the files we've defined, do:
# for file in aliases domains mailname passwd virtuals; do
#    touch /etc/mail/$file
# done

# cat >> /etc/mail/domains << EOF
domain.tld
mail.domain.tld
EOF

# cat >> /etc/mail/virtuals << EOF
abuse@domain.tld      user.name@domain.tld
hostmaster@domain.tld user.name@domain.tld
postmaster@domain.tld user.name@domain.tld
webmaster@domain.tld  user.name@domain.tld
user.name@domain.tld  vmail
EOF

# echo 'mail.domain.tld' > /etc/mail/mailname

Now we just need to add our user vmail who will act as the proxy through which
all of our mail is delivered to our fake users! 

addgroup -S vmail
adduser -S -D -H -h /var/vmail -s /bin/nologin -G vmail -g vmail vmail

All of the mail vmail delivers will eventually be delivered to:
/var/vmail/user.name@domain.tld/Mail

So if you want it to go somewhere else (for whatever FHS reasons you might
have), set the home directory for vmail to be somewhere else. Just make sure to
change the home directory of this new user to have the right permissions:
chown vmail:vmail /var/vmail

We'll come back to the alises file in the next section, and the passwd file when
we get to the dovecot section.


[3.0] mailing list configuration
________________________________________________________________________________


[4.0] rspamd+redis configuration
________________________________________________________________________________


[5.0] dovecot configuration
________________________________________________________________________________


[6.0] bubger configuration
________________________________________________________________________________









[7.0] References
________________________________________________________________________________

[1] https://www.linode.com/docs/guides/running-a-mail-server/
[2] https://poolp.org/posts/2019-09-14/setting-up-a-mail-server-with-opensmtpd-dovecot-and-rspamd/
[3] https://www.opensmtpd.org/manual.html
[4] http://mlmmj.org/
[5] https://text.causal.agency/019-mailing-list.txt
